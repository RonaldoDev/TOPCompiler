/* Generated By:JavaCC: Do not edit this line. Fun.java */
package parser;
import java.io.*;
import recovery.*;
import syntaticTree.*;
import semanalysis.*;

public class Fun implements FunConstants {
  final static String Version = "Top Compiler - Version 1.0 - 2018";
  int contadorDeErrosSintaticos = 0;
  boolean debug_recovery;
  Token ultimoErro = null;

  final static String CaminhoDoArquivo = "C:/Users/Matheus/Desktop/Universidade/6\u00aa Fase/Compila/programaaceito/programa4.fun";

  public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    boolean debug_as = false;
    boolean debug_recovery = false;
    boolean print_tree = true;
    String nomeArquivo = CaminhoDoArquivo;
    Fun analisador = leArquivo(nomeArquivo);
    System.out.println(Version);
    int i;
    for (i = 0; i < args.length - 1; i++)
    {
      switch (args [i])
      {
        case "-debug_AS" :
        debug = true;
        break;
        case "-debug_recovery" :
        debug_recovery = true;
        break;
        case "-print_tree" :
        print_tree = true;
        break;
        default :
        {
          System.out.println("Usage is" + "java Fun [-debug_AS] " + " [-debug_recovery] [-print_tree] inputfile");
          System.exit(0);
        }
      }
    }
    ListNode root = null;
    analisador.debug_recovery = debug_recovery;
    desabilitaVerboseDoAS(analisador, debug);
    try
    {
      root = analisador.program();
    }
    catch (ParseEOFException e)
    {
      System.err.println(e.getMessage());
    }
    finally
    {
      System.out.println(analisador.token_source.foundLexError() + ": Erros Lexicos encontrados");
      System.out.println(analisador.contadorDeErrosSintaticos + ": Erros Sintaticos encontratos");
    }
    if (temErros(analisador) == false)
    {
      System.out.println("Programa analisado com sucesso!");
    }
    //verifica se pode imprimir a arvore sintatica
    if (analisador.token_source.foundLexError() + analisador.contadorDeErrosSintaticos == 0)
    {
      if (print_tree)
      { //exibir a arvore
        PrintTree prt = new PrintTree();
        prt.printRoot(root); //chama metodo pra imprimir a arvore
      }
      TypeCheck tc = new TypeCheck();
      try
      {
        tc.TypeCheckRoot(root);
        System.out.println("0 Semantic error found");
      }
      catch (SemanticException e)
      {
        System.out.println(e.getMessage());
      }
    }
  } //main

  public static void desabilitaVerboseDoAS(Fun analisador, boolean debug)
  {
    if (!debug)
    {
      analisador.disable_tracing();
    }
  }

  public static boolean temErros(Fun analisador)
  {
    if (analisador.token_source.foundLexError() != 0)
    {
      System.out.println(analisador.token_source.foundLexError() + " erros lexicos encontrados");
    }
    return false;
  }

  public static Fun leArquivo(String nomeArquivo)
  {
    try
    {
      System.out.println("Lendo do arquivo " + nomeArquivo + "\u005cn");
      return new Fun(new java.io.FileInputStream(nomeArquivo));
    }
    catch (java.io.FileNotFoundException e)
    {
      System.out.println("Arquivo " + nomeArquivo + " n\u00e3o encontrado.");
      return null;
    }
  }

  static public String im(int x)
  {
    int ultimoIndice;
    String identificadorToken;
    identificadorToken = tokenImage [x];
    ultimoIndice = identificadorToken.lastIndexOf("\u005c"");
    try
    {
      identificadorToken = identificadorToken.substring(1, ultimoIndice);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return identificadorToken;
  }
  boolean isEndOfFile;

  void consomeTokenAteh(RecoverySet conjuntoTokens, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token token;
    if (debug_recovery)
    {
      System.out.println();
      System.out.println("*** " + met + " ***");
      System.out.println("\u0009Sincronizando Set: " + conjuntoTokens);
    }
    if (conjuntoTokens == null)
    {
      throw e;
    }
    token = getToken(1);
    while (!isEndOfFile)
    {
      if (conjuntoTokens.contains(token.kind))
      {
        if (debug_recovery)
        {
          System.out.println(" Encontrou token de sincroniza\u00ef\u00bf\u00bd\u00ef\u00bf\u00bdo -> " + im(token.kind));
          break;
        }
      }
      if (debug_recovery)
      {
        System.out.println("\u0009Ignorando token: " + im(token.kind));
      }
      getNextToken();
      token = getToken(1);
      if (token.kind == EOF && !conjuntoTokens.contains(EOF))
      {
        isEndOfFile = true;
      }
    }
    if (token != ultimoErro)
    {
      System.out.println(e.getMessage());
      ultimoErro = token;
      contadorDeErrosSintaticos++;
    }
    if (isEndOfFile)
    {
      throw new ParseEOFException("Final de arquivo encontrado prematuramente");
    }
  }

// Inicializacao do parser
  final public ListNode program() throws ParseException, ParseEOFException {
    trace_call("program");
    try {
  RecoverySet g = First.program;
  ListNode l = null, d = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      case CLASS:
        l = classlist(g);
        try {
          jj_consume_token(0);
      {if (true) return l;}
        } catch (ParseException e) {
    consomeTokenAteh(g, e, "program");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case CLASS:
          d = program();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
    {if (true) return l;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

/* Chama o classdecl passando como conjunto de sync o conjunto g, e todos terminais que est�o
no FIRST(classlist). Isso porque depois do classdecl podemos ter um classlist ou
o final da aplica��o dessa produ��o */
  final public ListNode classlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classlist");
    try {
  ClassDeclNode c = null;
  ListNode l = null;
  RecoverySet f = First.classlist.union(g);
      c = classdecl(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        l = classlist(g);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    {if (true) return new ListNode(c, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classlist");
    }
  }

// declaracao de classe Ex :  extends nomePai
// alterado de acordo com o livro (Programa 5.8)
  final public ClassDeclNode classdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classdecl");
    try {
  Token t1 = null, t2 = null, t3 = null;
  ClassBodyNode c1 = null;
      try {
        t1 = jj_consume_token(CLASS);
        t2 = jj_consume_token(tipo_Identificador);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          t3 = jj_consume_token(tipo_Identificador);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        c1 = classbody(g);
      {if (true) return new ClassDeclNode(t1, t2, t3, c1);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "classcl");
    {if (true) return new ClassDeclNode(t1, t2, t3, c1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classdecl");
    }
  }

//declaracao de corpo da classe, podendo criar variaveism, construtores, metodos dentro das chaves 
  final public ClassBodyNode classbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classbody");
    try {
  ListNode c = null,
  v = null,
  ct = null,
  m = null;
  VarDeclNode vd;
  ConstructDeclNode cd;
  MethodDeclNode md;
  Token t = null;
  RecoverySet   f2 = new RecoverySet(SEMICOLON).union(g).remove(tipo_Identificador),
  f3 = First.methoddecl.union(g).remove(tipo_Identificador), //ao inv�s de union g, estava union f1
  f4 = First.constructdecl.union(f3).remove(tipo_Identificador),
  f5 = First.vardecl.union(f4).remove(tipo_Identificador);
      try {
        t = jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          c = classlist(f5);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        label_1:
        while (true) {
          if (jj_2_1(3)) {
            ;
          } else {
            break label_1;
          }
          vd = vardecl(f2);
          jj_consume_token(SEMICOLON);
      if (v == null)
      v = new ListNode(vd);
      else
      v.add(vd);
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONSTRUCTOR:
          case INT:
          case STRING:
          case FLOAT:
          case BOOLEAN:
          case CHAR:
          case tipo_Identificador:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONSTRUCTOR:
            cd = constructdecl(f4);
      if (ct == null)
      ct = new ListNode(cd);
      else
      m.add(cd);
            break;
          case INT:
          case STRING:
          case FLOAT:
          case BOOLEAN:
          case CHAR:
          case tipo_Identificador:
            md = methoddecl(f3);
      if (m == null)
      m = new ListNode(md);
      else
      m.add(md);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RBRACE);
      {if (true) return new ClassBodyNode(t, c, v, ct, m);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "classbody");
    {if (true) return new ClassBodyNode(t, c, v, ct, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classbody");
    }
  }

// declaracao de uma variavel com opcional de array e tambem a possibilidade de inicialzacao
  final public VarDeclNode vardecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("vardecl");
    try {
  Token t1 = null, t2;
  int k = 0;
  ListNode l = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          t1 = jj_consume_token(INT);
          break;
        case STRING:
          t1 = jj_consume_token(STRING);
          break;
        case tipo_Identificador:
          t1 = jj_consume_token(tipo_Identificador);
          break;
        case CHAR:
          t1 = jj_consume_token(CHAR);
          break;
        case FLOAT:
          t1 = jj_consume_token(FLOAT);
          break;
        case BOOLEAN:
          t1 = jj_consume_token(BOOLEAN);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = jj_consume_token(tipo_Identificador);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
      k++;
        }
      l = new ListNode(new VarNode(t2, k));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
            alocexpression(g);
            break;
          case PLUS:
          case MINUS:
          case NOT:
          case LPAREN:
          case tipo_INT:
          case tipo_FLOAT:
          case tipo_STRING:
          case tipo_NULL:
          case tipo_CHAR:
          case tipo_BOOLEAN:
          case tipo_Identificador:
            expression(g);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          t2 = jj_consume_token(tipo_Identificador);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_5;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
      k++;
          }
        }
      l.add(new VarNode(t2, k));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
            alocexpression(g);
            break;
          case PLUS:
          case MINUS:
          case NOT:
          case LPAREN:
          case tipo_INT:
          case tipo_FLOAT:
          case tipo_STRING:
          case tipo_NULL:
          case tipo_CHAR:
          case tipo_BOOLEAN:
          case tipo_Identificador:
            expression(g);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
      {if (true) return new VarDeclNode(t1, l);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "vardecl");
    {if (true) return new VarDeclNode(t1, l);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("vardecl");
    }
  }

// declaracao de construtor
  final public ConstructDeclNode constructdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("constructdecl");
    try {
  Token t = null;
  MethodBodyNode m = null;
      try {
        t = jj_consume_token(CONSTRUCTOR);
        m = methodbody(g);
      {if (true) return new ConstructDeclNode(t, m);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "constructdecl");
    {
      {if (true) return new ConstructDeclNode(t, m);}
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("constructdecl");
    }
  }

// declaracao de metodo
  final public MethodDeclNode methoddecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methoddecl");
    try {
  Token t1 = null, t2 = null;
  int k = 0;
  MethodBodyNode m = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          t1 = jj_consume_token(INT);
          break;
        case STRING:
          t1 = jj_consume_token(STRING);
          break;
        case tipo_Identificador:
          t1 = jj_consume_token(tipo_Identificador);
          break;
        case CHAR:
          t1 = jj_consume_token(CHAR);
          break;
        case FLOAT:
          t1 = jj_consume_token(FLOAT);
          break;
        case BOOLEAN:
          t1 = jj_consume_token(BOOLEAN);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_6;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
      k++;
        }
        t2 = jj_consume_token(tipo_Identificador);
        m = methodbody(g);
      {if (true) return new MethodDeclNode(t2, k, t2, m);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "methoddecl");
    {if (true) return new MethodDeclNode(t2, k, t2, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("methoddecl");
    }
  }

// corpo do m�todo usado tanto no construtor quando no executando com (parametros*)
  final public MethodBodyNode methodbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methodbody");
    try {
  Token t1 = null;
  ListNode l = null;
  StatementNode s = null;
  RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        t1 = jj_consume_token(LPAREN);
        l = paramlist(f);
        jj_consume_token(RPAREN);
        s = statement(g);
      {if (true) return new MethodBodyNode(t1, l, s);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "methodbody");
    {if (true) return new MethodBodyNode(t1, l, s);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("methodbody");
    }
  }

// lista de paramatros que podem ou nao ser inicializados TODO Verificar alterar pag 142 # 154
  final public ListNode paramlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("paramlist");
    try {
  ListNode p = null, q = null;
  int k = 0;
  Token t1, t2, t3, t4, t5, t6;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case tipo_Identificador:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            t1 = jj_consume_token(INT);
            break;
          case STRING:
            t1 = jj_consume_token(STRING);
            break;
          case tipo_Identificador:
            t1 = jj_consume_token(tipo_Identificador);
            break;
          case CHAR:
            t1 = jj_consume_token(CHAR);
            break;
          case FLOAT:
            t1 = jj_consume_token(FLOAT);
            break;
          case BOOLEAN:
            t1 = jj_consume_token(BOOLEAN);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[18] = jj_gen;
              break label_7;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        k++;
          }
          t2 = jj_consume_token(tipo_Identificador);
        q = new ListNode(new VarNode(t2, k));
        p = new ListNode(new VarDeclNode(t1, q));
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
            jj_consume_token(ASSIGN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case tipo_CHAR:
              t3 = jj_consume_token(tipo_CHAR);
              break;
            case tipo_STRING:
              t3 = jj_consume_token(tipo_STRING);
              break;
            case tipo_INT:
              t3 = jj_consume_token(tipo_INT);
              break;
            case tipo_FLOAT:
              t3 = jj_consume_token(tipo_FLOAT);
              break;
            case tipo_BOOLEAN:
              t3 = jj_consume_token(tipo_BOOLEAN);
              break;
            case tipo_NULL:
              t3 = jj_consume_token(tipo_NULL);
              break;
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
        p.add(new AssignConstNode(t3));
            break;
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
        k = 0;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
              t4 = jj_consume_token(INT);
              break;
            case STRING:
              t4 = jj_consume_token(STRING);
              break;
            case tipo_Identificador:
              t4 = jj_consume_token(tipo_Identificador);
              break;
            case CHAR:
              t4 = jj_consume_token(CHAR);
              break;
            case FLOAT:
              t4 = jj_consume_token(FLOAT);
              break;
            case BOOLEAN:
              t4 = jj_consume_token(BOOLEAN);
              break;
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[23] = jj_gen;
                break label_9;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
        k++;
            }
            t5 = jj_consume_token(tipo_Identificador);
        ListNode qx = new ListNode(new VarNode(t4, k));
        p.add(new VarDeclNode(t5, qx));
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASSIGN:
              jj_consume_token(ASSIGN);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case tipo_CHAR:
                t6 = jj_consume_token(tipo_CHAR);
                break;
              case tipo_STRING:
                t6 = jj_consume_token(tipo_STRING);
                break;
              case tipo_INT:
                t6 = jj_consume_token(tipo_INT);
                break;
              case tipo_FLOAT:
                t6 = jj_consume_token(tipo_FLOAT);
                break;
              case tipo_BOOLEAN:
                t6 = jj_consume_token(tipo_BOOLEAN);
                break;
              case tipo_NULL:
                t6 = jj_consume_token(tipo_NULL);
                break;
              default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
        p.add(new AssignConstNode(t6));
              break;
            default:
              jj_la1[25] = jj_gen;
              ;
            }
          }
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
      {if (true) return p;}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "paramlist");
    {if (true) return null;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramlist");
    }
  }

// declaracao de corpo, usado em if, for, metodo:
  final public StatementNode statement(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statement");
    try {
  StatementNode s = null;
  ListNode l;
  Token t1 = null;
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(tipo_Identificador);
  RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(tipo_Identificador);
      try {
        if (jj_2_2(2)) {
          //livro diferente, antes estava: LOOKAHEAD(2) <tipo_Identificador> <tipo_Identificador>
              s = vardecl(f1);
        } else if (jj_2_3(3)) {
          // livro diferente, antes estava: LOOKAHEAD(3) LOOKAHEAD(1)
              s = atribstat(f1);
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case MINUS:
          case NOT:
          case LPAREN:
          case tipo_INT:
          case tipo_FLOAT:
          case tipo_STRING:
          case tipo_NULL:
          case tipo_CHAR:
          case tipo_BOOLEAN:
          case tipo_Identificador:
            s = expression(f1);
            jj_consume_token(SEMICOLON);
            break;
          case PRINT:
            s = printstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case READ:
            s = readstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case RETURN:
            s = returnstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case SUPER:
            s = superstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case IF:
            s = ifstat(g);
            break;
          case FOR:
            s = forstat(g);
            break;
          case LBRACE:
            t1 = jj_consume_token(LBRACE);
            l = statlist(f2);
            jj_consume_token(RBRACE);
      s = new BlockNode(t1, l);
            break;
          case BREAK:
            t1 = jj_consume_token(BREAK);
            jj_consume_token(SEMICOLON);
      s = new BreakNode(t1);
            break;
          case SEMICOLON:
            t1 = jj_consume_token(SEMICOLON);
      s = new NopNode(t1);
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      {if (true) return s;}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "statement");
    {if (true) return new NopNode(t1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

// declaracao de atribuicao com operadores e expressoes
  final public AtribNode atribstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("atribstat");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t1 = null;
  RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
      try {
        e1 = lvalue(f1);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          e2 = alocexpression(g);
          break;
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case tipo_INT:
        case tipo_FLOAT:
        case tipo_STRING:
        case tipo_NULL:
        case tipo_CHAR:
        case tipo_BOOLEAN:
        case tipo_Identificador:
          e2 = expression(g);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      {if (true) return new AtribNode(t1, e1, e2);}
      {if (true) return new AtribNode(t1, e1, e2);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "atribstat");
    {if (true) return new AtribNode(t1, e1, e2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("atribstat");
    }
  }

// funcao de conteudo criada para poder fazer atribuicao nas variaves TODO rever
  final public ExpreNode content(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("content");
    try {
  ExpreNode e = null;
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tipo_FLOAT:
        t = jj_consume_token(tipo_FLOAT);
      e = new FloatConstNode(t);
        break;
      case tipo_CHAR:
        t = jj_consume_token(tipo_CHAR);
      e = new CharConstNode(t);
        break;
      case tipo_BOOLEAN:
        t = jj_consume_token(tipo_BOOLEAN);
      e = new BoolConstNode(t);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("content");
    }
  }

// palavra reservada print
  final public PrintNode printstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("printstat");
    try {
  ExpreNode e1 = null;
  Token t = null;
      try {
        t = jj_consume_token(PRINT);
        e1 = expression(g);
      {if (true) return new PrintNode(t, e1);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "printstat");
    {if (true) return new PrintNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("printstat");
    }
  }

// palavra reservada read
  final public ReadNode readstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("readstat");
    try {
  ExpreNode e1 = null;
  Token t = null;
      try {
        t = jj_consume_token(READ);
        e1 = lvalue(g);
      {if (true) return new ReadNode(t, e1);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "readstat");
    {if (true) return new ReadNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("readstat");
    }
  }

  final public ReturnNode returnstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("returnstat");
    try {
  ExpreNode e1 = null;
  Token t = null;
      try {
        t = jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case tipo_INT:
        case tipo_FLOAT:
        case tipo_STRING:
        case tipo_NULL:
        case tipo_CHAR:
        case tipo_BOOLEAN:
        case tipo_Identificador:
          e1 = expression(g);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      {if (true) return new ReturnNode(t, e1);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "returnstat");
    {if (true) return new ReturnNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("returnstat");
    }
  }

  final public SuperNode superstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("superstat");
    try {
  ListNode l = null;
  Token t = null;
  RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(SUPER);
        jj_consume_token(LPAREN);
        l = arglist(f);
        jj_consume_token(RPAREN);
      {if (true) return new SuperNode(t, l);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "superstat");
    {if (true) return new SuperNode(t, l);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("superstat");
    }
  }

  final public IfNode ifstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ifstat");
    try {
  ExpreNode e1 = null;
  StatementNode s1 = null,
  s2 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(RPAREN).union(g),
  f2 = new RecoverySet(ELSE).union(g);
      try {
        t = jj_consume_token(IF);
        jj_consume_token(LPAREN);
        e1 = expression(f1);
        jj_consume_token(RPAREN);
        s1 = statement(f2);
        if (jj_2_4(3)) {
          jj_consume_token(ELSE);
          s2 = statement(g);
        } else {
          ;
        }
      {if (true) return new IfNode(t, e1, s1, s2);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "ifstat");
    {if (true) return new IfNode(t, e1, s1, s2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ifstat");
    }
  }

  final public ForNode forstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("forstat");
    try {
  AtribNode s1 = null,
  s2 = null;
  StatementNode s3 = null;
  ExpreNode e1 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
  f2 = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tipo_Identificador:
          s1 = atribstat(f1);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case tipo_INT:
        case tipo_FLOAT:
        case tipo_STRING:
        case tipo_NULL:
        case tipo_CHAR:
        case tipo_BOOLEAN:
        case tipo_Identificador:
          e1 = expression(f1);
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tipo_Identificador:
          s2 = atribstat(f2);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        s3 = statement(g);
      {if (true) return new ForNode(t, e1, s1, s2, s3);}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "forstat");
    {if (true) return new ForNode(t, e1, s1, s2, s3);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("forstat");
    }
  }

// lista de declaracoes
  final public ListNode statlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statlist");
    try {
  ListNode l = null;
  StatementNode s = null;
  RecoverySet f = First.statlist.remove(tipo_Identificador).union(g);
      s = statement(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case NOT:
      case BREAK:
      case FOR:
      case IF:
      case INT:
      case PRINT:
      case READ:
      case RETURN:
      case STRING:
      case SUPER:
      case FLOAT:
      case BOOLEAN:
      case CHAR:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case tipo_INT:
      case tipo_FLOAT:
      case tipo_STRING:
      case tipo_NULL:
      case tipo_CHAR:
      case tipo_BOOLEAN:
      case tipo_Identificador:
        l = statlist(g);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    {if (true) return new ListNode(s, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statlist");
    }
  }

// funcao de atribuicao a esquerda
  final public ExpreNode lvalue(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("lvalue");
    try {
  ExpreNode e1 = null,
  e2 = null;
  Token t1 = null,
  t2 = null;
  ListNode l = null;
      try {
        t1 = jj_consume_token(tipo_Identificador);
      e1 = new VarNode(t1);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case DOT:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            t1 = jj_consume_token(LBRACKET);
            e2 = expression(null);
            jj_consume_token(RBRACKET);
      e1 = new IndexNode(t1, e1, e2);
            break;
          case DOT:
            t1 = jj_consume_token(DOT);
            t2 = jj_consume_token(tipo_Identificador);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              jj_consume_token(LPAREN);
              l = arglist(null);
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[36] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      {if (true) return e1;}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "lvalue");
    {if (true) return new VarNode(t1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lvalue");
    }
  }

// funcao para instanciar de novos tipoos
  final public ExpreNode alocexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("alocexpression");
    try {
  ExpreNode e1 = null,
  e2 = null;
  ListNode l = null;
  Token t1, t2;
  RecoverySet f1 = new RecoverySet(RPAREN).union(g),
  f2 = new RecoverySet(RBRACKET).union(g);
      t1 = jj_consume_token(NEW);
      if (jj_2_5(2)) {
        t2 = jj_consume_token(tipo_Identificador);
        jj_consume_token(LPAREN);
        l = arglist(f1);
        jj_consume_token(RPAREN);
      e1 = new NewObjectNode(t1, t2, l);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case tipo_Identificador:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            t2 = jj_consume_token(INT);
            break;
          case STRING:
            t2 = jj_consume_token(STRING);
            break;
          case tipo_Identificador:
            t2 = jj_consume_token(tipo_Identificador);
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_11:
          while (true) {
            jj_consume_token(LBRACKET);
            e2 = expression(f2);
            jj_consume_token(RBRACKET);
        if (l == null)
        l = new ListNode(e2);
        else
        l.add(e2);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[39] = jj_gen;
              break label_11;
            }
          }
      e1 = new NewArrayNode(t1, t2, l);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("alocexpression");
    }
  }

//ele falou algo sobre nao terminais que aceitam null devem ter o union.(g).final da p�gina impressa 115
// nivel mais alto de precedencia em expressoes
  final public ExpreNode expression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("expression");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t = null;
      try {
        e1 = expr(g);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
          case XOR:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_12;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            t = jj_consume_token(OR);
            break;
          case XOR:
            t = jj_consume_token(XOR);
            break;
          default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          e2 = expression(g);
        }
      {if (true) return (e2 != null) ? new RelationalNode(t, e1, e2) : e1;}
      } catch (ParseException e) {
    consomeTokenAteh(g, e, "expression");
    if (e2 != null)
    {if (true) return new RelationalNode(t, e1, e2);}
    else
    {if (true) return e1;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

  final public ExpreNode expr(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("expr");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t = null;
      e1 = exp(g);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_13;
        }
        t = jj_consume_token(AND);
        e2 = expr(g);
      }
    {if (true) return (e2 != null) ? new RelationalNode(t, e1, e2) : e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

  final public ExpreNode exp(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("exp");
    try {
  ExpreNode e1 = null;
  Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        t = jj_consume_token(NOT);
        e1 = comparexpression(g);
      {if (true) return new RelationalNode(t, e1, null);}
        break;
      case PLUS:
      case MINUS:
      case LPAREN:
      case tipo_INT:
      case tipo_FLOAT:
      case tipo_STRING:
      case tipo_NULL:
      case tipo_CHAR:
      case tipo_BOOLEAN:
      case tipo_Identificador:
        e1 = comparexpression(g);
      {if (true) return e1;}
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("exp");
    }
  }

  final public ExpreNode comparexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("comparexpression");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t = null;
      e1 = numexpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NEQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          t = jj_consume_token(LT);
          break;
        case GT:
          t = jj_consume_token(GT);
          break;
        case LE:
          t = jj_consume_token(LE);
          break;
        case GE:
          t = jj_consume_token(GE);
          break;
        case EQ:
          t = jj_consume_token(EQ);
          break;
        case NEQ:
          t = jj_consume_token(NEQ);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = numexpr();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    {if (true) return (e2 != null) ? new RelationalNode(t, e1, e2) : e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comparexpression");
    }
  }

// nivel intermediario de precedencia
  final public ExpreNode numexpr() throws ParseException, ParseEOFException {
    trace_call("numexpr");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t;
      e1 = term();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = term();
      e1 = new AddNode(t, e1, e2);
      }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("numexpr");
    }
  }

// expressoes com prioridade de precedecia
  final public ExpreNode term() throws ParseException, ParseEOFException {
    trace_call("term");
    try {
  ExpreNode e1 = null, e2;
  Token t = null;
      e1 = unaryexpr();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case REM:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          t = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          t = jj_consume_token(DIVIDE);
          break;
        case REM:
          t = jj_consume_token(REM);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = unaryexpr();
      e1 = new MultNode(t, e1, e2);
      }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("term");
    }
  }

// expressoes unarias que te mais alta precedencia perante a gramatica
  final public ExpreNode unaryexpr() throws ParseException, ParseEOFException {
    trace_call("unaryexpr");
    try {
  ExpreNode e;
  Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      e = factor();
    {if (true) return ((t == null) ? e : new UnaryNode(t, e));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unaryexpr");
    }
  }

// fator que pode ser valorada ou chamada em recursivo com expressoes para encadeamento
  final public ExpreNode factor() throws ParseException, ParseEOFException {
    trace_call("factor");
    try {
  ExpreNode e = null;
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tipo_INT:
        t = jj_consume_token(tipo_INT);
      e = new IntConstNode(t);
        break;
      case tipo_STRING:
        t = jj_consume_token(tipo_STRING);
      e = new StringConstNode(t);
        break;
      case tipo_FLOAT:
        t = jj_consume_token(tipo_FLOAT);
      e = new FloatConstNode(t);
        break;
      case tipo_NULL:
        t = jj_consume_token(tipo_NULL);
      e = new NullConstNode(t);
        break;
      case tipo_CHAR:
        t = jj_consume_token(tipo_CHAR);
      e = new CharConstNode(t);
        break;
      case tipo_BOOLEAN:
        t = jj_consume_token(tipo_BOOLEAN);
      e = new BoolConstNode(t);
        break;
      case tipo_Identificador:
        e = lvalue(null);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = expression(null);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("factor");
    }
  }

  final public ListNode arglist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("arglist");
    try {
  ListNode l = null;
  ExpreNode e = null;
  RecoverySet f = new RecoverySet(COMMA).union(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case NOT:
      case LPAREN:
      case tipo_INT:
      case tipo_FLOAT:
      case tipo_STRING:
      case tipo_NULL:
      case tipo_CHAR:
      case tipo_BOOLEAN:
      case tipo_Identificador:
        e = expression(f);
      l = new ListNode(e);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          e = expression(f);
        l.add(e);
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("arglist");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (!jj_rescan) trace_call("exp(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) { if (!jj_rescan) trace_return("exp(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("exp(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (!jj_rescan) trace_call("statement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) { if (!jj_rescan) trace_return("statement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("statement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (!jj_rescan) trace_call("unaryexpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_3R_64()) { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(tipo_Identificador)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (!jj_rescan) trace_call("expr(LOOKING AHEAD...)");
    if (jj_3R_52()) { if (!jj_rescan) trace_return("expr(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("expr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_51() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (!jj_rescan) trace_call("superstat(LOOKING AHEAD...)");
    if (jj_scan_token(SUPER)) { if (!jj_rescan) trace_return("superstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("superstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("superstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("lvalue(LOOKING AHEAD...)");
    if (jj_scan_token(tipo_Identificador)) { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_17() {
    if (!jj_rescan) trace_call("vardecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    if (jj_scan_token(tipo_Identificador)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (!jj_rescan) trace_call("term(LOOKING AHEAD...)");
    if (jj_3R_61()) { if (!jj_rescan) trace_return("term(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_26() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (!jj_rescan) trace_call("statlist(LOOKING AHEAD...)");
    if (jj_3R_19()) { if (!jj_rescan) trace_return("statlist(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("statlist(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_18() {
    if (!jj_rescan) trace_call("atribstat(LOOKING AHEAD...)");
    if (jj_3R_24()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ASSIGN)) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_42() {
    if (!jj_rescan) trace_call("returnstat(LOOKING AHEAD...)");
    if (jj_scan_token(RETURN)) { if (!jj_rescan) trace_return("returnstat(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("returnstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_39() {
    if (!jj_rescan) trace_call("expression(LOOKING AHEAD...)");
    if (jj_3R_49()) { if (!jj_rescan) trace_return("expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (!jj_rescan) trace_call("numexpr(LOOKING AHEAD...)");
    if (jj_3R_59()) { if (!jj_rescan) trace_return("numexpr(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("numexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(tipo_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(tipo_CHAR)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (!jj_rescan) trace_call("readstat(LOOKING AHEAD...)");
    if (jj_scan_token(READ)) { if (!jj_rescan) trace_return("readstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_24()) { if (!jj_rescan) trace_return("readstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("readstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_45() {
    if (!jj_rescan) trace_call("forstat(LOOKING AHEAD...)");
    if (jj_scan_token(FOR)) { if (!jj_rescan) trace_return("forstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("forstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("forstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(tipo_NULL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(tipo_FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(tipo_STRING)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(tipo_Identificador)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (!jj_rescan) trace_call("comparexpression(LOOKING AHEAD...)");
    if (jj_3R_57()) { if (!jj_rescan) trace_return("comparexpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("comparexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(tipo_INT)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (!jj_rescan) trace_call("alocexpression(LOOKING AHEAD...)");
    if (jj_scan_token(NEW)) { if (!jj_rescan) trace_return("alocexpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("alocexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (!jj_rescan) trace_call("printstat(LOOKING AHEAD...)");
    if (jj_scan_token(PRINT)) { if (!jj_rescan) trace_return("printstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_39()) { if (!jj_rescan) trace_return("printstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("printstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_64() {
    if (!jj_rescan) trace_call("factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) { if (!jj_rescan) trace_return("factor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (!jj_rescan) trace_call("ifstat(LOOKING AHEAD...)");
    if (jj_scan_token(IF)) { if (!jj_rescan) trace_return("ifstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("ifstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ifstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public FunTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800001,0x800001,0x800000,0x4000000,0x800000,0x41000000,0x41000000,0x40000000,0x0,0x800400c0,0x400,0x0,0x0,0x800400c0,0x400,0x40000000,0x0,0x40000000,0x0,0x0,0x400,0x0,0x40000000,0x0,0x0,0x400,0x40000000,0x284400c0,0x800400c0,0x0,0x400c0,0x0,0x400c0,0x0,0x684400c0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x300000,0x300000,0x80000,0x400c0,0x1f800,0x1f800,0xc0,0xc0,0x20300,0x20300,0xc0,0xc0,0x0,0x0,0x400c0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8000e8,0x8000e8,0x8000e8,0x1000,0xfe0100,0x0,0x8000,0x1000,0xfe0100,0x0,0x8000e8,0x1000,0x8000e8,0x1000,0x7e0000,0x0,0x8000,0x8000e8,0x1000,0x7e0000,0x0,0x8000e8,0xfe4517,0xfe0100,0x640000,0xfe0100,0x800000,0xfe0100,0x800000,0xfe45ff,0x11000,0x100,0x11000,0x800008,0x1000,0x800008,0x0,0x0,0x0,0xfe0100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe0100,0x8000,0xfe0100,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Fun(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Fun(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Fun(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Fun(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

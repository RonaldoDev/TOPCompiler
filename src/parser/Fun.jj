/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;
import recovery.*;
import syntaticTree.*;
import semanalysis.*;

public class Fun
{
  final static String Version = "Top Compiler - Version 1.0 - 2018";
  int contadorDeErrosSintaticos = 0;
  boolean debug_recovery;
  Token ultimoErro = null;

  final static String CaminhoDoArquivo = "C:/Users/Matheus/Desktop/Universidade/6ª Fase/Compila/programaaceito/programa5.fun";

  public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    boolean debug_as = false;
    boolean debug_recovery = false;
    boolean print_tree = true;
    String nomeArquivo = CaminhoDoArquivo;
    Fun analisador = leArquivo(nomeArquivo);
    System.out.println(Version);
    int i;
    for (i = 0; i < args.length - 1; i++)
    {
      switch (args [i])
      {
        case "-debug_AS" : 
        debug = true;
        break;
        case "-debug_recovery" : 
        debug_recovery = true;
        break;
        case "-print_tree" : 
        print_tree = true;
        break;
        default :
        {
          System.out.println("Usage is" + "java Fun [-debug_AS] " + " [-debug_recovery] [-print_tree] inputfile");
          System.exit(0);
        }
      }
    }
    ListNode root = null;
    analisador.debug_recovery = debug_recovery;
    desabilitaVerboseDoAS(analisador, debug);
    try
    {
      root = analisador.program();
    }
    catch (ParseEOFException e)
    {
      System.err.println(e.getMessage());
    }
    finally
    {
      System.out.println(analisador.token_source.foundLexError() + ": Erros Lexicos encontrados");
      System.out.println(analisador.contadorDeErrosSintaticos + ": Erros Sintaticos encontratos");
    }
    if (temErros(analisador) == false)
    {
      System.out.println("Programa analisado com sucesso!");
    }
    //verifica se pode imprimir a arvore sintatica
    if (analisador.token_source.foundLexError() + analisador.contadorDeErrosSintaticos == 0)
    {
      if (print_tree)
      { //exibir a arvore
        PrintTree prt = new PrintTree();
        prt.printRoot(root); //chama metodo pra imprimir a arvore
      }
      TypeCheck tc = new TypeCheck();
      try
      {
        tc.TypeCheckRoot(root);
        System.out.println("0 Semantic error found");
      }
      catch (SemanticException e)
      {
        System.out.println(e.getMessage());
      }
    }
  } //main

  public static void desabilitaVerboseDoAS(Fun analisador, boolean debug)
  {
    if (!debug)
    {
      analisador.disable_tracing();
    }
  }

  public static boolean temErros(Fun analisador)
  {
    if (analisador.token_source.foundLexError() != 0)
    {
      System.out.println(analisador.token_source.foundLexError() + " erros lexicos encontrados");
    }
    return false;
  }

  public static Fun leArquivo(String nomeArquivo)
  {
    try
    {
      System.out.println("Lendo do arquivo " + nomeArquivo + "\n");
      return new Fun(new java.io.FileInputStream(nomeArquivo));
    }
    catch (java.io.FileNotFoundException e)
    {
      System.out.println("Arquivo " + nomeArquivo + " n\u00e3o encontrado.");
      return null;
    }
  }

  static public String im(int x)
  {
    int ultimoIndice;
    String identificadorToken;
    identificadorToken = tokenImage [x];
    ultimoIndice = identificadorToken.lastIndexOf("\"");
    try
    {
      identificadorToken = identificadorToken.substring(1, ultimoIndice);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return identificadorToken;
  }
  boolean isEndOfFile;

  void consomeTokenAteh(RecoverySet conjuntoTokens, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token token;
    if (debug_recovery)
    {
      System.out.println();
      System.out.println("*** " + met + " ***");
      System.out.println("\u0009Sincronizando Set: " + conjuntoTokens);
    }
    if (conjuntoTokens == null)
    {
      throw e;
    }
    token = getToken(1);
    while (!isEndOfFile)
    {
      if (conjuntoTokens.contains(token.kind))
      {
        if (debug_recovery)
        {
          System.out.println(" Encontrou token de sincroniza\u00ef\u00bf\u00bd\u00ef\u00bf\u00bdo -> " + im(token.kind));
          break;
        }
      }
      if (debug_recovery)
      {
        System.out.println("\u0009Ignorando token: " + im(token.kind));
      }
      getNextToken();
      token = getToken(1);
      if (token.kind == EOF && !conjuntoTokens.contains(EOF))
      {
        isEndOfFile = true;
      }
    }
    if (token != ultimoErro)
    {
      System.out.println(e.getMessage());
      ultimoErro = token;
      contadorDeErrosSintaticos++;
    }
    if (isEndOfFile)
    {
      throw new ParseEOFException("Final de arquivo encontrado prematuramente");
    }
  }
}

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : //operadores
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < REM : "%" >
| < NOT : "not" >
| < AND : "and" >
| < OR : "or" >
| < XOR : "xor" >
}

TOKEN : //palavras reservadas
{
  < BREAK : "break" >
| < CLASS : "class" >
| < CONSTRUCTOR : "constructor" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FOR : "for" >
| < WHILE : "while" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < STRING : "string" >
| < SUPER : "super" >
  //nosso
| < FLOAT : "float" >
| < BOOLEAN : "boolean" >
| < CHAR : "char" >
}

TOKEN : //simbolos especiais
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

TOKEN :
{
  < tipo_INT :
    ( // numeros decimais, octais, hexadecimais ou binarios
      (
        [ "0"-"9" ] ([ "0"-"9" ])* //um ou mais digidos
      )
    ) >
| 
  < tipo_FLOAT :
    ( // floats
      (
        ([ "0"-"9" ])+ [ "." ] ([ "0"-"9" ])+ //pelo menos um digito de 0 a 9, seguido por um unico ponto e pelo menos mais um digito de 0 a 9
      )
    ) >
| 
  < tipo_STRING : // constante string como "ab cd"
    "\"" (~[ "\"", "\n", "\r" ])* "\"" > //aspas seguidas por qualquer coisa que nao seja aspas ou quebra de linha, terminando com aspas. Pode nao ter nada entre as aspas
| < tipo_NULL : "null" > //constante null
| < tipo_CHAR : // constante CHAR como 'a'
    "\'" (~[ "\\" ]) "\'"
  | "\'"
    (
      "\\n"
    | "\\r"
    | "\\t"
    | "\\\""
    | "\\\'"
    | "\\\\"
    )
    "\'" > //aspas simples seguidas por qualquer digito unico que nao seja aspas simples ou quebra de linha, terminando com as pas simples.
| < tipo_BOOLEAN :
    (
      "true"
    | "TRUE"
    | "false"
    | "FALSE"
    ) 
  >
}

TOKEN : //identificadores
{
  < tipo_Identificador : //qualquer combinacao de letras e numeros que comece com uma letra
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

SKIP : //comentarios
{
  "/*" : multilinecomment
}

< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

SKIP :
{
  "//" : singlelinecomment
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}

SPECIAL_TOKEN : //trata erros lexicos
{
  < INVALID_LEXICAL : 
    (~[ "a"-"z", 
    "A"-"Z", 
    "0"-"9", 
    "\"", 
    "(", 
    ")", 
    "[", 
    "[", 
    "{", 
    "{", 
    ";", 
    ",", 
    ".", 
    "'", 
    "=", 
    ">", 
    "<", 
    "!", 
    "+", 
    "-", 
    "*", 
    "/", 
    "%", 
    " ", 
    "\t", 
    "\n", 
    "\r", 
    "\f" 
    ])+ >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Elemento invalido encontrado: " + image);
    countLexError++;
  }
| 
  < INVALID_STRING : 
    "\"" (~[ "\n", "\r", "\"" ])* [ "\n", "\r" ] >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - A string possui uma quebra de linha inesperada: " + image);
    countLexError++;
  }
| 
  < INVALID_CHAR :
    "\'" (~[ "\n", "\r", "\'" ])* [ "\n", "\r" ] //char com quebra de linha
  | 
    "\'" (~[ "\n", "\r", "\'" ]) (~[ "\n", "\r", "\'" ])+ "\'" //char com mais de um caractere
  | 
    "\'" "\'" //char vazio
  | 
    "\'" "\\" "\'" //char do tipo '\'
  >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Char invalido: " + image);
    countLexError++;
  }
}

// Inicializacao do parser
ListNode program() throws ParseEOFException :
{
  RecoverySet g = First.program;
  ListNode l = null, d = null;
}
{
  < EOF >
| 
  l = classlist(g)
  try
  {
    //[ classlist(g) ] < EOF >// Livro estï¿½ diferente.
    < EOF >
    {
      return l;
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "program");
  }
  [ d = program() ]
  {
    return l;
  }
}

/* Chama o classdecl passando como conjunto de sync o conjunto g, e todos terminais que estï¿½o
no FIRST(classlist). Isso porque depois do classdecl podemos ter um classlist ou
o final da aplicaï¿½ï¿½o dessa produï¿½ï¿½o */
ListNode classlist(RecoverySet g) throws ParseEOFException :
{
  ClassDeclNode c = null;
  ListNode l = null;
  RecoverySet f = First.classlist.union(g);
}
{
  c = classdecl(f) [ l = classlist(g) ]
  {
    return new ListNode(c, l);
  }
}

// declaracao de classe Ex :  extends nomePai
// alterado de acordo com o livro (Programa 5.8)
ClassDeclNode classdecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2 = null, t3 = null;
  ClassBodyNode c1 = null;
}
{
  try
  {
    t1 = < CLASS > t2 = < tipo_Identificador > [ < EXTENDS > t3 = < tipo_Identificador > ] c1 = classbody(g)
    {
      return new ClassDeclNode(t1, t2, t3, c1);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "classcl");
    return new ClassDeclNode(t1, t2, t3, c1);
  }
}

//declaracao de corpo da classe, podendo criar variaveism, construtores, metodos dentro das chaves 
ClassBodyNode classbody(RecoverySet g) throws ParseEOFException :
{
  ListNode c = null, 
  v = null, 
  ct = null, 
  m = null;
  VarDeclNode vd;
  ConstructDeclNode cd;
  MethodDeclNode md;
  Token t = null;
  RecoverySet 	f2 = new RecoverySet(SEMICOLON).union(g).remove(tipo_Identificador), 
  f3 = First.methoddecl.union(g).remove(tipo_Identificador), //ao invï¿½s de union g, estava union f1
  f4 = First.constructdecl.union(f3).remove(tipo_Identificador), 
  f5 = First.vardecl.union(f4).remove(tipo_Identificador);
}
{ //Essa parte tï¿½ diferente do livro, deixei como tava no livro. pï¿½gina 100 (pï¿½gina impressa).
  try
  {
    t = < LBRACE > 
    [ c = classlist(f5) ] 
    (LOOKAHEAD(3)
    vd = vardecl(f2) < SEMICOLON >
    {	
      if (v == null) 
      v = new ListNode(vd);
      else 
      v.add(vd);
    }
    ) * 
    (
    (cd = constructdecl(f4)
    {
      if (ct == null) 
      ct = new ListNode(cd);
      else 
      m.add(cd);
    }
    )
  | 
    (md = methoddecl(f3)
    {
      if (m == null) 
      m = new ListNode(md);
      else 
      m.add(md);
    }
    )) * 
    < RBRACE >
    {
      return new ClassBodyNode(t, c, v, ct, m);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "classbody");
    return new ClassBodyNode(t, c, v, ct, m);
  }
}

// declaracao de uma variavel com opcional de array e tambem a possibilidade de inicialzacao
VarDeclNode vardecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2;
  int k = 0;
  ListNode l = null;
}
{
  try
  {
    (t1 = < INT >
  | t1 = < STRING >
  | t1 = < tipo_Identificador >
  | t1 = < CHAR >
  | t1 = < FLOAT >
  | t1 = < BOOLEAN >) 
    t2 = < tipo_Identificador > (< LBRACKET > < RBRACKET >
    {
      k++;
    }
    ) *
    {
      l = new ListNode(new VarNode(t2, k));
    }
    (< ASSIGN > (alocexpression(g)
  | expression(g))) ? 
    (< COMMA > t2 = < tipo_Identificador > (< LBRACKET > < RBRACKET >
    {
      k++;
    }
    ) *) *
    {
      l.add(new VarNode(t2, k));
    }
    (< ASSIGN > (alocexpression(g)
  | expression(g))) ?
    {
      return new VarDeclNode(t1, l);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "vardecl");
    return new VarDeclNode(t1, l);
  }
}

// declaracao de construtor
ConstructDeclNode constructdecl(RecoverySet g) throws ParseEOFException :
{
  Token t = null;
  MethodBodyNode m = null;
}
{
  try
  {
    t = < CONSTRUCTOR > m = methodbody(g)
    {
      return new ConstructDeclNode(t, m);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "constructdecl");
    {
      return new ConstructDeclNode(t, m);
    }
  }
}

// declaracao de metodo
MethodDeclNode methoddecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2 = null;
  int k = 0;
  MethodBodyNode m = null;
}
{
  try
  {
    (
    t1 = < INT >
  | t1 = < STRING >
  | t1 = < tipo_Identificador >
  | t1 = < CHAR >
  | t1 = < FLOAT >
  | t1 = < BOOLEAN >
    ) 
    (< LBRACKET > < RBRACKET >
    {
      k++;
    }
    ) * 
    t2 = < tipo_Identificador > m = methodbody(g)
    {
      return new MethodDeclNode(t2, k, t2, m);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "methoddecl");
    return new MethodDeclNode(t2, k, t2, m);
  }
}

// corpo do mï¿½todo usado tanto no construtor quando no executando com (parametros*)
MethodBodyNode methodbody(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null;
  ListNode l = null;
  StatementNode s = null;
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try
  {
    t1 = < LPAREN > l = paramlist(f) < RPAREN > s = statement(g)
    {
      return new MethodBodyNode(t1, l, s);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "methodbody");
    return new MethodBodyNode(t1, l, s);
  }
}

// lista de paramatros que podem ou nao ser inicializados TODO Verificar alterar pag 142 # 154
ListNode paramlist(RecoverySet g) throws ParseEOFException :
{
  ListNode p = null, q = null;
  int k = 0;
  Token t1, t2, t3, t4, t5, t6;
}
{
  try
  {
    [
      (t1 = < INT >
    | t1 = < STRING >
    | t1 = < tipo_Identificador >
    | t1 = < CHAR >
    | t1 = < FLOAT >
    | t1 = < BOOLEAN >) (< LBRACKET > < RBRACKET >
      {
        k++;
      }
      ) * t2 = < tipo_Identificador >
      {
        q = new ListNode(new VarNode(t2, k));
        p = new ListNode(new VarDeclNode(t1, q));
      }
      (< ASSIGN > 
      (t3 = < tipo_CHAR >
    | t3 = < tipo_STRING >
    | t3 = < tipo_INT >
    | t3 = < tipo_FLOAT >
    | t3 = < tipo_BOOLEAN >
    | t3 = < tipo_NULL >)
      {
        p.add(new AssignConstNode(t3));
      }
      ) ? 
      (< COMMA >
      {
        k = 0;
      }
      (t4 = < INT >
    | t4 = < STRING >
    | t4 = < tipo_Identificador >
    | t4 = < CHAR >
    | t4 = < FLOAT >
    | t4 = < BOOLEAN >) (< LBRACKET > < RBRACKET >
      {
        k++;
      }
      ) * 
      t5 = < tipo_Identificador >
      {
        ListNode qx = new ListNode(new VarNode(t4, k));
        p.add(new VarDeclNode(t5, qx));
      }
      (< ASSIGN > 
      (t6 = < tipo_CHAR >
    | t6 = < tipo_STRING >
    | t6 = < tipo_INT >
    | t6 = < tipo_FLOAT >
    | t6 = < tipo_BOOLEAN >
    | t6 = < tipo_NULL >)
      {
        p.add(new AssignConstNode(t6));
      }
      ) ?
      ) *
    ]
    {
      return p;
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "paramlist");
    return null;
  }
}

// declaracao de corpo, usado em if, for, metodo:
StatementNode statement(RecoverySet g) throws ParseEOFException :
{
  StatementNode s = null;
  ListNode l;
  Token t1 = null;
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(tipo_Identificador);
  RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(tipo_Identificador);
}
{
  try
  {
    (
    LOOKAHEAD(2) //livro diferente, antes estava: LOOKAHEAD(2) <tipo_Identificador> <tipo_Identificador>
    s = vardecl(f1)
  | 
    LOOKAHEAD(3) // livro diferente, antes estava: LOOKAHEAD(3) LOOKAHEAD(1)
    s = atribstat(f1) < SEMICOLON >
  | 
    s = expression(f1) < SEMICOLON >
  | 
    s = printstat(f1) < SEMICOLON >
  | 
    s = readstat(f1) < SEMICOLON >
  | 
    s = returnstat(f1) < SEMICOLON >
  | 
    s = superstat(f1) < SEMICOLON >
  | 
    s = ifstat(g)
  | 
    s = forstat(g)
  | 
    t1 = < LBRACE > l = statlist(f2) < RBRACE >
    {
      s = new BlockNode(t1, l);
    }
  | 
    t1 = < BREAK > < SEMICOLON >
    {
      s = new BreakNode(t1);
    }
  | 
    t1 = < SEMICOLON >
    {
      s = new NopNode(t1);
    }
    )
    {
      return s;
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "statement");
    return new NopNode(t1);
  }
}

// declaracao de atribuicao com operadores e expressoes
AtribNode atribstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t1 = null;
  RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
  try
  {
    e1 = lvalue(f1) < ASSIGN > (e2 = alocexpression(g)
  | e2 = expression(g))
    {
      return new AtribNode(t1, e1, e2);
    }
    {
      return new AtribNode(t1, e1, e2);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "atribstat");
    return new AtribNode(t1, e1, e2);
  }
}

// funcao de conteudo criada para poder fazer atribuicao nas variaves TODO rever
ExpreNode content(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e = null;
  Token t;
}
{
  (
    t = < tipo_FLOAT >
    {
      e = new FloatConstNode(t);
    }
  | 
    t = < tipo_CHAR >
    {
      e = new CharConstNode(t);
    }
  | 
    t = < tipo_BOOLEAN >
    {
      e = new BoolConstNode(t);
    }
  )
  < SEMICOLON >
  {
    return e;
  }
}

// palavra reservada print
PrintNode printstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  Token t = null;
}
{
  try
  {
    t = < PRINT > e1 = expression(g)
    {
      return new PrintNode(t, e1);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "printstat");
    return new PrintNode(t, e1);
  }
}

// palavra reservada read
ReadNode readstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  Token t = null;
}
{
  try
  {
    t = < READ > e1 = lvalue(g)
    {
      return new ReadNode(t, e1);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "readstat");
    return new ReadNode(t, e1);
  }
}

ReturnNode returnstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  Token t = null;
}
{
  try
  {
    t = < RETURN > [ e1 = expression(g) ]
    {
      return new ReturnNode(t, e1);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "returnstat");
    return new ReturnNode(t, e1);
  }
}

SuperNode superstat(RecoverySet g) throws ParseEOFException :
{
  ListNode l = null;
  Token t = null;
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try
  {
    t = < SUPER > < LPAREN > l = arglist(f) < RPAREN >
    {
      return new SuperNode(t, l);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "superstat");
    return new SuperNode(t, l);
  }
}

IfNode ifstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  StatementNode s1 = null, 
  s2 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(RPAREN).union(g), 
  f2 = new RecoverySet(ELSE).union(g);
}
{
  try
  {
    t = < IF > < LPAREN > e1 = expression(f1) < RPAREN > s1 = statement(f2)
    [
      LOOKAHEAD(3)
      < ELSE > s2 = statement(g)
    ]
    {
      return new IfNode(t, e1, s1, s2);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "ifstat");
    return new IfNode(t, e1, s1, s2);
  }
}

ForNode forstat(RecoverySet g) throws ParseEOFException :
{
  AtribNode s1 = null, 
  s2 = null;
  StatementNode s3 = null;
  ExpreNode e1 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g), 
  f2 = new RecoverySet(RPAREN).union(g);
}
{
  try
  {
    t = < FOR > < LPAREN > [ s1 = atribstat(f1) ] < SEMICOLON > 
    [ e1 = expression(f1) ] < SEMICOLON > 
    [ s2 = atribstat(f2) ] < RPAREN > 
    s3 = statement(g)
    {
      return new ForNode(t, e1, s1, s2, s3);
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "forstat");
    return new ForNode(t, e1, s1, s2, s3);
  }
}

// lista de declaracoes
ListNode statlist(RecoverySet g) throws ParseEOFException :
{
  ListNode l = null;
  StatementNode s = null;
  RecoverySet f = First.statlist.remove(tipo_Identificador).union(g);
}
{
  s = statement(f) [ l = statlist(g) ]
  {
    return new ListNode(s, l);
  }
}

// funcao de atribuicao a esquerda
ExpreNode lvalue(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, 
  e2 = null;
  Token t1 = null, 
  t2 = null;
  ListNode l = null;
}
{
  try
  {
    t1 = < tipo_Identificador >
    {
      e1 = new VarNode(t1);
    }
    (
    t1 = < LBRACKET > e2 = expression(null) < RBRACKET > //Porque null? Pï¿½gina impressa 105
    {
      e1 = new IndexNode(t1, e1, e2);
    }
  | 
    t1 = < DOT > t2 = < tipo_Identificador > [ < LPAREN > l = arglist(null) < RPAREN > ]
    ) *
    {
      return e1;
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "lvalue");
    return new VarNode(t1);
  }
}

// funcao para instanciar de novos tipoos
ExpreNode alocexpression(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, 
  e2 = null;
  ListNode l = null;
  Token t1, t2;
  RecoverySet f1 = new RecoverySet(RPAREN).union(g), 
  f2 = new RecoverySet(RBRACKET).union(g);
}
{
  t1 = < NEW >
  (
    LOOKAHEAD(2)
    t2 = < tipo_Identificador > < LPAREN > l = arglist(f1) < RPAREN >
    {
      e1 = new NewObjectNode(t1, t2, l);
    }
  |
    (
      t2 = < INT >
    | t2 = < STRING >
    | t2 = < tipo_Identificador >
    )
    (
      < LBRACKET > e2 = expression(f2) < RBRACKET >
      {
        if (l == null) 
        l = new ListNode(e2);
        else 
        l.add(e2);
      }
    )+
    {
      e1 = new NewArrayNode(t1, t2, l);
    }
  )
  {
    return e1;
  }
}

//ele falou algo sobre nao terminais que aceitam null devem ter o union.(g).final da pï¿½gina impressa 115
// nivel mais alto de precedencia em expressoes
ExpreNode expression(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t = null;
}
{
  try
  {
    e1 = expr(g) ((t = < OR >
  | t = < XOR >) e2 = expression(g)) *
    {
      return (e2 != null) ? new RelationalNode(t, e1, e2) : e1;
    }
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "expression");
    if (e2 != null) 
    return new RelationalNode(t, e1, e2);
    else 
    return e1;
  }
}

ExpreNode expr(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t = null;
}
{
  e1 = exp(g)
  (
    t = < AND > e2 = expr(g)
  )*
  {
    return (e2 != null) ? new RelationalNode(t, e1, e2) : e1;
  }
}

ExpreNode exp(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  Token t = null;
}
{
  (
    t = < NOT > e1 = comparexpression(g)
    {
      return new RelationalNode(t, e1, null);
    }
  | 
    e1 = comparexpression(g)
    {
      return e1;
    }
  )
}

ExpreNode comparexpression(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t = null;
}
{
  e1 = numexpr()
  [
    (
      t = < LT >
    | t = < GT >
    | t = < LE >
    | t = < GE >
    | t = < EQ >
    | t = < NEQ >
    )
    e2 = numexpr()
  ]
  {
    return (e2 != null) ? new RelationalNode(t, e1, e2) : e1;
  }
}

// nivel intermediario de precedencia
ExpreNode numexpr() throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t;
}
{
  e1 = term()
  (
    (
      t = < PLUS >
    | t = < MINUS >
    )
    e2 = term()
    {
      e1 = new AddNode(t, e1, e2);
    }
  )*
  {
    return e1;
  }
}

// expressoes com prioridade de precedecia
ExpreNode term() throws ParseEOFException :
{
  ExpreNode e1 = null, e2;
  Token t = null;
}
{
  e1 = unaryexpr()
  (
    (
      t = < MULTIPLY >
    | t = < DIVIDE >
    | t = < REM >
    )
    e2 = unaryexpr()
    {
      e1 = new MultNode(t, e1, e2);
    }
  )*
  {
    return e1;
  }
}

// expressoes unarias que te mais alta precedencia perante a gramatica
ExpreNode unaryexpr() throws ParseEOFException :
{
  ExpreNode e;
  Token t = null;
}
{
  [
    (
      t = < PLUS >
    | t = < MINUS >
    )
  ]
  e = factor()
  {
    return ((t == null) ? e : new UnaryNode(t, e));
  }
}

// fator que pode ser valorada ou chamada em recursivo com expressoes para encadeamento
ExpreNode factor() throws ParseEOFException :
{
  ExpreNode e = null;
  Token t;
}
{
  (
    t = < tipo_INT >
    {
      e = new IntConstNode(t);
    }
  | 
    t = < tipo_STRING >
    {
      e = new StringConstNode(t);
    }
  | 
    t = < tipo_FLOAT >
    {
      e = new FloatConstNode(t);
    }
  | 
    t = < tipo_NULL >
    {
      e = new NullConstNode(t);
    }
  | 
    t = < tipo_CHAR >
    {
      e = new CharConstNode(t);
    }
  | 
    t = < tipo_BOOLEAN >
    {
      e = new BoolConstNode(t);
    }
  | 
    e = lvalue(null)
  | 
    < LPAREN > e = expression(null) < RPAREN >
  )
  {
    return e;
  }
}

ListNode arglist(RecoverySet g) throws ParseEOFException :
{
  ListNode l = null;
  ExpreNode e = null;
  RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
  [
    e = expression(f)
    {
      l = new ListNode(e);
    }
    (
      < COMMA > e = expression(f)
      {
        l.add(e);
      }
    )*
  ]
  {
    return l;
  }
}

/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;

public class Fun
{
  final static String Version = "Top Compiler - Version 1.0 - 2018";
  int contadorDeErrosSintaticos = 0;	

  final static String CaminhoDoArquivo = "C:/Users/Ronaldo/Downloads/programaaceito1.fun";

  public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    String nomeArquivo = CaminhoDoArquivo;
    Fun analisador = leArquivo(nomeArquivo);
    System.out.println(Version);
	int i;
	for(i = 0; i< args.length - 1; i++) {
		if(args[i].equals("-debug_AS")) {
		  debug = true;
		}else {
			System.out.println("Usage is" + "java Fun [-debug_AS] inputfile");
			System.exit(0);
		}
	}
		
    desabilitaVerboseDoAS(analisador, debug);
    
    try
    {
      analisador.program();
    }
    catch (ParseException e)
    {
      System.err.println(e.getMessage());
      analisador.contadorDeErrosSintaticos++;
    }
    finally
    {
      System.out.println(analisador.token_source.foundLexError() + ": Erros Lexicos encontrados");
      System.out.println(analisador.contadorDeErrosSintaticos + ": Erros Sintaticos encontratos");
    }
    if (temErros(analisador) == false)
    {
      System.out.println("Programa analisado com sucesso!");
    }
  } //main

  public static void desabilitaVerboseDoAS(Fun analisador, boolean debug)
  {
    if (!debug)
    {
       analisador.disable_tracing();
    }
  }

  public static boolean temErros(Fun analisador)
  {
    if (analisador.token_source.foundLexError() != 0)
    {
      System.out.println(analisador.token_source.foundLexError() + " erros léxicos encontrados");
    }
    return false;
  }

  public static Fun leArquivo(String nomeArquivo)
  {
    try
    {
      System.out.println("Lendo do arquivo " + nomeArquivo + "\n");
      return new Fun(new java.io.FileInputStream(nomeArquivo));
    }
    catch (java.io.FileNotFoundException e)
    {
      System.out.println("Arquivo " + nomeArquivo + " não encontrado.");
      return null;
    }
  }
  
  final public void classdecl() throws ParseException
  {
    trace_call("classdecl");
    try
    {
      jj_consume_token(CLASS);
      jj_consume_token(tipo_Identificador);
      switch ((jj_ntk == - 1) ? jj_ntk() : jj_ntk)
      {
        case EXTENDS : 
        jj_consume_token(EXTENDS);
        jj_consume_token(tipo_Identificador);
        break;
        default : 
        jj_la1 [1] = jj_gen;
        ;
      }
      classbody();
    }
    finally
    {
      trace_return("classdecl");
    }
  }
  
} // Fun

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : //operadores
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < REM : "%" >
| < NOT : "not" >
| < AND : "and" >
| < OR : "or" >
| < XOR : "xor" >
}

TOKEN : //palavras reservadas
{
  < BREAK : "break" >
| < CLASS : "class" >
| < CONSTRUCTOR : "constructor" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FOR : "for" >
| < WHILE : "while" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < STRING : "string" >
| < SUPER : "super" >
  //nosso
| < FLOAT : "float" >
| < BOOLEAN : "boolean" >
| < CHAR : "char" >
}

TOKEN : //simbolos especiais
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

TOKEN :
{
  < tipo_INT :
    ( // numeros decimais, octais, hexadecimais ou binarios
      (
        [ "0"-"9" ] ([ "0"-"9" ])* //um ou mais digidos
      )
    ) >
| 
  < tipo_FLOAT :
    ( // floats
      (
        ([ "0"-"9" ])+ [ "." ] ([ "0"-"9" ])+ //pelo menos um digito de 0 a 9, seguido por um unico ponto e pelo menos mais um digito de 0 a 9
      )
    ) >
| 
  < tipo_STRING : // constante string como "ab cd"
    "\"" (~[ "\"", "\n", "\r" ])* "\"" > //aspas seguidas por qualquer coisa que nao seja aspas ou quebra de linha, terminando com aspas. Pode nao ter nada entre as aspas
| < tipo_NULL : "null" > //constante null
| < tipo_CHAR : // constante CHAR como 'a'
    "\'" (~[ "\\" ]) "\'"
  | "\'"
    (
      "\\n"
    | "\\r"
    | "\\t"
    | "\\\""
    | "\\\'"
    | "\\\\"
    )
    "\'" > //aspas simples seguidas por qualquer digito unico que nao seja aspas simples ou quebra de linha, terminando com as pas simples.
| < tipo_BOOLEAN :
    (
      "true"
    | "TRUE"
    | "false"
    | "FALSE"
    ) 
  >
}

//TOKEN : //operadores logicos
//{
//  < tipo_Logico  :
//  (
//    < NOT >| < AND > | < OR > | < XOR >)>
//|
//  < #NOT : "not" >
//| < #AND : "and" >
//| < #OR : "or" >
//| < #XOR : "xor" >
//  
//}

TOKEN : //identificadores
{
  < tipo_Identificador : //qualquer combinacao de letras e numeros que comece com uma letra
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

SKIP : //comentarios
{
  "/*" : multilinecomment
}

< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

SKIP :
{
  "//" : singlelinecomment
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}

SPECIAL_TOKEN : //trata erros lexicos
{
  < INVALID_LEXICAL : 
    (~[ "a"-"z", 
    "A"-"Z", 
    "0"-"9", 
    "\"", 
    "(", 
    ")", 
    "[", 
    "[", 
    "{", 
    "{", 
    ";", 
    ",", 
    ".", 
    "'", 
    "=", 
    ">", 
    "<", 
    "!", 
    "+", 
    "-", 
    "*", 
    "/", 
    "%", 
    " ", 
    "\t", 
    "\n", 
    "\r", 
    "\f" 
    ])+ >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Elemento invalido encontrado: " + image);
    countLexError++;
  }
| 
  < INVALID_STRING : 
    "\"" (~[ "\n", "\r", "\"" ])* [ "\n", "\r" ] >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - A string possui uma quebra de linha inesperada: " + image);
    countLexError++;
  }
| 
  < INVALID_CHAR :
    "\'" (~[ "\n", "\r", "\'" ])* [ "\n", "\r" ] //char com quebra de linha
  | 
    "\'" (~[ "\n", "\r", "\'" ]) (~[ "\n", "\r", "\'" ])+ "\'" //char com mais de um caractere
  | 
    "\'" "\'" //char vazio
  | 
    "\'" "\\" "\'" //char do tipo '\'
  >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Char invalido: " + image);
    countLexError++;
  }
}


// Inicializacao do parser
void program() :
{
}
{
  [ classlist() ] < EOF >
}

void classlist() :
{
}
{
  classdecl() [ classlist() ]
}
// declaracao de classe Ex : class nome extends nomePai
void classdecl() :
{
}
{
  < CLASS > < tipo_Identificador > [ < EXTENDS > < tipo_Identificador > ] classbody()
}
//declaracao de corpo da classe, podendo criar variaveism, construtores, metodos dentro das chaves 
void classbody() :
{
}
{
  < LBRACE >
  [classlist()] 
    (LOOKAHEAD(3) vardecl() < SEMICOLON >)*
(  (contructdecl()) |
	(methoddecl()))* 
  < RBRACE >
}
// declaracao de uma variavel com opcional de array e tambem a possibilidade de inicialzacao
void vardecl() :
{
}
{
	( <INT> | <STRING> | <tipo_Identificador> | < CHAR > | < FLOAT > | < BOOLEAN >)
	<tipo_Identificador> ( <LBRACKET> <RBRACKET>)*  (assigndecl())?
	
}
// declacarao de atribuicao de variavel
void assigndecl() :
{
}
{
	< ASSIGN > (assignbody())
}
// atribuicao podendo ser todos os tipos ou array
void assignbody():
{
}
{
  ((< tipo_CHAR >| < tipo_STRING > | < tipo_INT > | < tipo_FLOAT > | < tipo_BOOLEAN > | < tipo_Identificador >)  (< RBRACKET >  <LBRACKET >)?) | < tipo_NULL >
}
// declaracao de construtor
void contructdecl() :
{
}
{
	<CONSTRUCTOR> methodbody()
}
// declaracao de metodo
void methoddecl() :
{
}
{
  (< INT > | <STRING > | < tipo_Identificador >  | < CHAR > | < FLOAT > | < BOOLEAN >) (< RBRACKET >  <LBRACKET >)*
  < tipo_Identificador > methodbody()
    
}
// corpo do método usado tanto no construtor quando no executando com (parametros*)
void methodbody() :
{
}
{
  < LPAREN > paramlist() < RPAREN > statement()
    
}
// lista de paramatros que podem ou nao ser inicializados
void paramlist() : 
{
}
{
  [
 	vardecl() (< COMMA > (vardecl())*
  )*
    ]
}
// declaracao de corpo, usado em if, for, metodo:
void statement() :
{
}
{
  LOOKAHEAD(2)
  vardecl()
| 
  LOOKAHEAD(3)atribstat() < SEMICOLON >
|
  expression() < SEMICOLON >
| 
  printstat() < SEMICOLON >
| 
  readstat() < SEMICOLON >
| 
  returnstat() < SEMICOLON >
| 
  superstat() < SEMICOLON >
| 
  ifstat()
| 
  forstat()
| 
  < LBRACE > statlist() < RBRACE >
| 
  < BREAK >< SEMICOLON >
| 
  < SEMICOLON >
  
}
// declaracao de atribuicao com operadores e expressoes
void atribstat() :
{
}
{
  lvalue() < ASSIGN > (alocexpression() | LOOKAHEAD(2)expression() | content() )
}
// funcao de conteudo criada para poder fazer atribuicao nas variaves
void content() :
{
}
{
  (< tipo_CHAR > | < tipo_FLOAT > | < tipo_BOOLEAN > ) < SEMICOLON >
}
// palavra reservada print
void printstat() :
{
}
{
  < PRINT > expression()
}
// palavra reservada read
void readstat() :
{
}
{
  < READ > lvalue()
}

void returnstat() :
{
}
{
	< RETURN > [expression()]
}

void superstat() :
{
}
{
  < SUPER > <LPAREN > arglist() < RPAREN >
}

void ifstat():
{
}
{
  < IF > <LPAREN > expression() < RPAREN > statement()
  [LOOKAHEAD(1) < ELSE > statement()]
}


void forstat() :
{
}
{
  < FOR > <LPAREN > [atribstat()] <SEMICOLON >
  [expression()] <SEMICOLON >
  [atribstat()] <RPAREN >
  statement()
}
// lista de declaracoes
void statlist():
{
}
{
  statement() [statlist()]
}
// funcao de atribuicao a esquerda
void lvalue():
{
}
{
  < tipo_Identificador > (
    		< LBRACKET > expression() < RBRACKET > |
    		< DOT > <tipo_Identificador > [<LPAREN > arglist() < RPAREN >]
    		)*
}
// funcao para instanciar de novos tipoos
void alocexpression():
{
}
{
  < NEW > (
    		LOOKAHEAD(2) < tipo_Identificador > <LPAREN > arglist() < RPAREN > |
    		(< INT > | < STRING > | < tipo_Identificador >)
    		(< LBRACKET > expression() < RBRACKET >)+
    	  )
}
// nivel mais alto de precedencia em expressoes
void expression():
{
}
{
  numexpr() [( < LT > | < GT > | < LE > | < GE > | < EQ > | < NEQ > ) numexpr()]
}
// nivel intermediario de precedencia
void numexpr():
{
}
{
  term() ((< PLUS > | < MINUS > | <  OR > | <  XOR >) term())*
}
// expressoes com prioridade de precedecia
void term():
{
}
{
  unaryexpr() ((< MULTIPLY > | < DIVIDE > | < REM > | < AND >) unaryexpr())*
}
// expressoes unarias que te mais alta precedencia perante a gramatica
void unaryexpr():
{
}
{
  [(< PLUS > | < MINUS > | <  NOT >)] factor()
}
// fator que pode ser valorada ou chamada em recursivo com expressoes para encadeamento
void factor():
{
}
{
  (
    < tipo_INT  > |
    < tipo_STRING  > |
    < tipo_NULL > |
    < tipo_CHAR > |
    < tipo_BOOLEAN > |
    lvalue() |
    < LPAREN > expression() < RPAREN >)
}

void arglist():
{
}
{
  [expression() (< COMMA > expression())*]
}




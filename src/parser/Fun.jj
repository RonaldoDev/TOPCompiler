/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;
import recovery.*;

public class Fun
{
  final static String Version = "Top Compiler - Version 1.0 - 2018";
  int contadorDeErrosSintaticos = 0;
  boolean debug_recovery;

  final static String CaminhoDoArquivo = "C:/Users/Ronaldo/Downloads/programaaceito1.fun";

  public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    boolean debug_as = false;
    boolean debug_recovery = false;
    String nomeArquivo = CaminhoDoArquivo;
    Fun analisador = leArquivo(nomeArquivo);
    System.out.println(Version);
    int i;
    for (i = 0; i < args.length - 1; i++)
    {
      switch (args [i])
      {
        case "-debug_AS" : 
        debug = true;
        break;
        case "-debug_recovery" : 
        debug_recovery = true;
        break;
        default :
        {
          System.out.println("Usage is" + "java Fun [-debug_AS] inputfile");
          System.exit(0);
        }
      }
    }
    desabilitaVerboseDoAS(analisador, debug);
    try
    {
      analisador.program();
    }
    catch (ParseException e)
    {
      System.err.println(e.getMessage());
      analisador.contadorDeErrosSintaticos++;
    }
    catch (ParseEOFException e)
    {
      System.err.println(e.getMessage());
      analisador.contadorDeErrosSintaticos++;
    }
    finally
    {
      System.out.println(analisador.token_source.foundLexError() + ": Erros Lexicos encontrados");
      System.out.println(analisador.contadorDeErrosSintaticos + ": Erros Sintaticos encontratos");
    }
    if (temErros(analisador) == false)
    {
      System.out.println("Programa analisado com sucesso!");
    }
  } //main

  public static void desabilitaVerboseDoAS(Fun analisador, boolean debug)
  {
    if (!debug)
    {
      analisador.disable_tracing();
    }
  }

  public static boolean temErros(Fun analisador)
  {
    if (analisador.token_source.foundLexError() != 0)
    {
      System.out.println(analisador.token_source.foundLexError() + " erros l\u00e9xicos encontrados");
    }
    return false;
  }

  public static Fun leArquivo(String nomeArquivo)
  {
    try
    {
      System.out.println("Lendo do arquivo " + nomeArquivo + "\n");
      return new Fun(new java.io.FileInputStream(nomeArquivo));
    }
    catch (java.io.FileNotFoundException e)
    {
      System.out.println("Arquivo " + nomeArquivo + " n\u00e3o encontrado.");
      return null;
    }
  }

  static public String im(int x)
  {
    int ultimoIndice;
    String identificadorToken;
    identificadorToken = tokenImage [x];
    ultimoIndice = identificadorToken.lastIndexOf("\"");
    try
    {
      identificadorToken = identificadorToken.substring(1, ultimoIndice);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return identificadorToken;
  }
  boolean isEndOfFile;

  void consomeTokenAteh(RecoverySet conjuntoTokens, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token token;
    if (debug_recovery)
    {
      System.out.println();
      System.out.println("*** " + met + " ***");
      System.out.println("\u0009Sincronizando Set: " + conjuntoTokens);
    }
    if (conjuntoTokens == null)
    {
      throw e;
    }
    token = getToken(1);
    while (!isEndOfFile)
    {
      if (conjuntoTokens.contains(token.kind))
      {
        if (debug_recovery)
        {
          System.out.println(" Encontrou token, sincronizando" + im(token.kind));
          break;
        }
      }
      if (debug_recovery)
      {
        System.out.println("\u0009Ignorando token: " + im(token.kind));
      }
      getNextToken();
      token = getToken(1);
      if (token.kind == EOF && conjuntoTokens.contains(EOF))
      {
        isEndOfFile = true;
      }
    }
    if(token != ultimoIndice) //No livro, ao invés de token ele coloca como tok, e substitui lastError por ultimoIndice
    {
      System.out.println(e.getMessage());
      ultimoIndice = token; //aqui também.
    	contadorDeErrosSintaticos++;
    }
    
    
    if (isEndOfFile)
    {
      throw new ParseEOFException("Final de arquivo encontrado prematuramente");
    }
  }

  final public void classdecl() throws ParseException
  {
    trace_call("classdecl");
    try
    {
      jj_consume_token(CLASS);
      jj_consume_token(tipo_Identificador);
      switch ((jj_ntk == - 1) ? jj_ntk() : jj_ntk)
      {
        case EXTENDS : 
        jj_consume_token(EXTENDS);
        jj_consume_token(tipo_Identificador);
        break;
        default : 
        jj_la1 [1] = jj_gen;
        ;
      }
      classbody();
    }
    finally
    {
      trace_return("classdecl");
    }
  }
} // Fun

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : //operadores
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < REM : "%" >
| < NOT : "not" >
| < AND : "and" >
| < OR : "or" >
| < XOR : "xor" >
}

TOKEN : //palavras reservadas
{
  < BREAK : "break" >
| < CLASS : "class" >
| < CONSTRUCTOR : "constructor" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FOR : "for" >
| < WHILE : "while" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < STRING : "string" >
| < SUPER : "super" >
  //nosso
| < FLOAT : "float" >
| < BOOLEAN : "boolean" >
| < CHAR : "char" >
}

TOKEN : //simbolos especiais
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

TOKEN :
{
  < tipo_INT :
    ( // numeros decimais, octais, hexadecimais ou binarios
      (
        [ "0"-"9" ] ([ "0"-"9" ])* //um ou mais digidos
      )
    ) >
| 
  < tipo_FLOAT :
    ( // floats
      (
        ([ "0"-"9" ])+ [ "." ] ([ "0"-"9" ])+ //pelo menos um digito de 0 a 9, seguido por um unico ponto e pelo menos mais um digito de 0 a 9
      )
    ) >
| 
  < tipo_STRING : // constante string como "ab cd"
    "\"" (~[ "\"", "\n", "\r" ])* "\"" > //aspas seguidas por qualquer coisa que nao seja aspas ou quebra de linha, terminando com aspas. Pode nao ter nada entre as aspas
| < tipo_NULL : "null" > //constante null
| < tipo_CHAR : // constante CHAR como 'a'
    "\'" (~[ "\\" ]) "\'"
  | "\'"
    (
      "\\n"
    | "\\r"
    | "\\t"
    | "\\\""
    | "\\\'"
    | "\\\\"
    )
    "\'" > //aspas simples seguidas por qualquer digito unico que nao seja aspas simples ou quebra de linha, terminando com as pas simples.
| < tipo_BOOLEAN :
    (
      "true"
    | "TRUE"
    | "false"
    | "FALSE"
    ) 
  >
}

//TOKEN : //operadores logicos
//{
//  < tipo_Logico  :
//  (
//    < NOT >| < AND > | < OR > | < XOR >)>
//|
//  < #NOT : "not" >
//| < #AND : "and" >
//| < #OR : "or" >
//| < #XOR : "xor" >
//  
//}
TOKEN : //identificadores
{
  < tipo_Identificador : //qualquer combinacao de letras e numeros que comece com uma letra
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

SKIP : //comentarios
{
  "/*" : multilinecomment
}

< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

SKIP :
{
  "//" : singlelinecomment
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}

SPECIAL_TOKEN : //trata erros lexicos
{
  < INVALID_LEXICAL : 
    (~[ "a"-"z", 
    "A"-"Z", 
    "0"-"9", 
    "\"", 
    "(", 
    ")", 
    "[", 
    "[", 
    "{", 
    "{", 
    ";", 
    ",", 
    ".", 
    "'", 
    "=", 
    ">", 
    "<", 
    "!", 
    "+", 
    "-", 
    "*", 
    "/", 
    "%", 
    " ", 
    "\t", 
    "\n", 
    "\r", 
    "\f" 
    ])+ >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Elemento invalido encontrado: " + image);
    countLexError++;
  }
| 
  < INVALID_STRING : 
    "\"" (~[ "\n", "\r", "\"" ])* [ "\n", "\r" ] >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - A string possui uma quebra de linha inesperada: " + image);
    countLexError++;
  }
| 
  < INVALID_CHAR :
    "\'" (~[ "\n", "\r", "\'" ])* [ "\n", "\r" ] //char com quebra de linha
  | 
    "\'" (~[ "\n", "\r", "\'" ]) (~[ "\n", "\r", "\'" ])+ "\'" //char com mais de um caractere
  | 
    "\'" "\'" //char vazio
  | 
    "\'" "\\" "\'" //char do tipo '\'
  >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Char invalido: " + image);
    countLexError++;
  }
}

// Inicializacao do parser
void program() throws ParseEOFException :
{
  RecoverySet g = First.program;
}
{
  <EOF>
|
	classlist(g)
  try
  {
    // [ classlist() ] < EOF > Livro está diferente.
    <EOF>
  }
  catch (ParseException e)
  {
    consomeTokenAteh(g, e, "program");
  }
  [ program() ]
}
/* Chama o classdecl passando como conjunto de sync o conjunto g, e todos terminais que estão
no FIRST(classlist). Isso porque depois do classdecl podemos ter um classlist ou
o final da aplicação dessa produção */
void classlist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = First.classlist.union(g);
}
{
  classdecl(f) [ classlist(g) ]
}

// declaracao de classe Ex : class nome extends nomePai
// alterado de acordo com o livro (Programa 5.8)
void classdecl(RecoverySet g) throws ParseEOFException :
{
}
{
  try {
    	< CLASS > < tipo_Identificador > [ < EXTENDS > < tipo_Identificador > ] classbody(g)
	} catch (ParseException e){
	  consumeUntil(g, e, "classcl");
	}
}
//declaracao de corpo da classe, podendo criar variaveism, construtores, metodos dentro das chaves 
void classbody(RecoverySet g) throws ParseEOFException :
{
  RecoverySet 	f1 = new RecoverySet(RBRACE), //na sessão 5.3 (página impressa 113), ele não mostra o f1
				f2 = new RecoverySet(SEMICOLON).union(g).remove(tipo_Identificador),
				f3 = First.methoddecl.union(g).remove(tipo_Identificador), //ao invés de union g, estava union f1
				f4 = First.constructdecl.union(f3).remove(tipo_Identificador),
				f5 = First.valdecl.union(f4).remove(tipo_Identificador);
}
{ //Essa parte tá diferente do livro, deixei como tava no livro. página 100 (página impressa).
/*   < LBRACE > 
  [ classlist() ]
  (
    LOOKAHEAD(3)
    vardecl() < SEMICOLON >
  )*
  (
    (
      contructdecl()
    )
  |
    (
      methoddecl()
    )
  )*
  < RBRACE >
*/
  try {  
  < LBRACE > 
  [ classlist(f5) ]
  (LOOKAHEAD(3) vardecl(f2) < SEMICOLON >)*
  (contructdecl(f4))*
  (methoddecl(f3))*
  < RBRACE >
} catch (ParseException e){
		constumeUntil(g, e, "classbody");
	}
}

// declaracao de uma variavel com opcional de array e tambem a possibilidade de inicialzacao
void vardecl(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
	 (
    < INT >
  | < STRING >
  | < tipo_Identificador >
  | < CHAR >
  | < FLOAT >
  | < BOOLEAN >
  )
  < tipo_Identificador > (< LBRACKET > < RBRACKET >)*
  (
    assigndecl()
  )?
  } catch(ParseException e) {
	consumeUntil(g, e, "vardecl");
  }
}

// declacarao de atribuicao de variavel
void assigndecl() :
{
}
{
  < ASSIGN >
  (
    assignbody()
  )
}

// atribuicao podendo ser todos os tipos ou array
void assignbody() :
{
}
{
  (
    (
      < tipo_CHAR >
    | < tipo_STRING >
    | < tipo_INT >
    | < tipo_FLOAT >
    | < tipo_BOOLEAN >
    | < tipo_Identificador >
    )
    (< RBRACKET > < LBRACKET >)?
  )
| < tipo_NULL >
}

// declaracao de construtor
void contructdecl() :
{
}
{
  < CONSTRUCTOR > methodbody()
}

// declaracao de metodo
void methoddecl() :
{
}
{
  (
    < INT >
  | < STRING >
  | < tipo_Identificador >
  | < CHAR >
  | < FLOAT >
  | < BOOLEAN >
  )
  (< RBRACKET > < LBRACKET >)* 
  < tipo_Identificador > methodbody()
}

// corpo do método usado tanto no construtor quando no executando com (parametros*)
void methodbody(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try {
	  < LPAREN > paramlist(f) < RPAREN > statement(g)
  } catch (ParseException e){
	consumeUntil(g, e, "methodbody");
  }
}

// lista de paramatros que podem ou nao ser inicializados
void paramlist(RecoverySet g) throws ParseEOFException :
{
}
{//Isso aqui ta bem diferente do que está no livro no fim da página impressa 101
try {
  [
    vardecl(g) //adicionei o g como parametro porque é o que estava fazendo nos outros
    (
      < COMMA >
      (
        vardecl(g) //adicionei o g como parametro porque é o que estava fazendo nos outros
      )*
    )*
  ]
} catch (ParseException e) {
	consumeUntil(g, e, "paramlist");
}
}

// declaracao de corpo, usado em if, for, metodo:
void statement(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(tipo_Identificador);
  RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(tipo_Identificador);
}
{
  try {
  
  LOOKAHEAD(<tipo_Identificador> <tipo_Identificador>) //livro diferente, antes estava: LOOKAHEAD(2)
  vardecl(f1)
| 
  LOOKAHEAD(1) // livro diferente, antes estava: LOOKAHEAD(3)
  atribstat(f1) < SEMICOLON >
| 
  expression(f1) < SEMICOLON >
| 
  printstat(f1) < SEMICOLON >
| 
  readstat(f1) < SEMICOLON >
| 
  returnstat(f1) < SEMICOLON >
| 
  superstat(f1) < SEMICOLON >
| 
  ifstat(g)
| 
  forstat(g)
| 
  < LBRACE > statlist(f2) < RBRACE >
| 
  < BREAK > < SEMICOLON >
| 
  < SEMICOLON >
} catch (ParseException e) {
	consumeUntil(g, e, "statement");
}
}

// declaracao de atribuicao com operadores e expressoes
void atribstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = RecoverySet(ASSIGN).union(g);
}
{
  try {
	lvalue(f1) < ASSIGN >
  (
    alocexpression(g)
  | LOOKAHEAD(2) //no livro não tem esse lookahead
    expression(g)
  | content(g)  //não sei se é g ou f1, no livro não tem esse content... colocando g, aqui pode dar pau
  )	
  } catch (ParseException e) {
	consumeUntil(g, e, "atribstat");
  }
  
}

// funcao de conteudo criada para poder fazer atribuicao nas variaves
void content() :
{
}
{
  (
    < tipo_CHAR >
  | < tipo_FLOAT >
  | < tipo_BOOLEAN >
  )
  < SEMICOLON >
}

// palavra reservada print
void printstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
	  < PRINT > expression(g)
	} catch (ParseException e) {
		consumeUntil(g, e, "printstat");
	}
}

// palavra reservada read
void readstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
 	 < READ > lvalue(g)
	} catch (ParseException e) {
		consumeUntil(g, e, "readstat");
	}
}

void returnstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
  	< RETURN > [ expression(g) ]
  } catch (ParseException e) {
		consumeUntil(g, e, "returnstat");
	}
}

void superstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try { 
  < SUPER > < LPAREN > arglist(f) < RPAREN >
  } catch (ParseException e) {
		consumeUntil(g, e, "superstat");
	}
}

void ifstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(RPAREN).union(g),
  			  f2 = new RecoverySet(ELSE).union(g);
}
{
  try { 
  < IF > < LPAREN > expression(f1) < RPAREN > statement(f2)
  [
    LOOKAHEAD(1)
    < ELSE > statement(g)
  ]
  } catch (ParseException e) {
		consumeUntil(g, e, "ifstat");
	}
}

void forstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
  			  f2 = new RecoverySet(RPAREN).union(g);
}
{
  try { 
  < FOR > < LPAREN > [ atribstat(f1) ] < SEMICOLON > 
  [ expression(f1) ] < SEMICOLON > 
  [ atribstat(f2) ] < RPAREN > 
  statement(g)
  } catch (ParseException e) {
		consumeUntil(g, e, "forstat");
	}
}

// lista de declaracoes
void statlist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = First.statlist.remove(tipo_Identificador).union(g);
}
{
  statement(f) [ statlist(g) ]
}

// funcao de atribuicao a esquerda
void lvalue(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
  < tipo_Identificador >
  (
    < LBRACKET > expression(null) < RBRACKET > //Porque null? Página impressa 105
  | 
    < DOT > < tipo_Identificador > [ < LPAREN > arglist(null) < RPAREN > ]
  )*
} catch (ParseException e){
	consumeUntil(g, e, "lvalue");
}
}

// funcao para instanciar de novos tipoos
void alocexpression(RecoverySet g) throws ParseEOFException :
{
    RecoverySet f1 = new RecoverySet(RPAREN).union(g),
  			  f2 = new RecoverySet(RBRACKET).union(g);
}
{
  < NEW >
  (
    LOOKAHEAD(2)
    < tipo_Identificador > < LPAREN > arglist(f1) < RPAREN >
  |
    (
      < INT >
    | < STRING >
    | < tipo_Identificador >
    )
    (
      < LBRACKET > expression(f2) < RBRACKET >
    )+
  )
}
//ele falou algo sobre nao terminais que aceitam null devem ter o union.(g).final da página impressa 115
// nivel mais alto de precedencia em expressoes
void expression(RecoverySet g) throws ParseEOFException :
{
}
{
  try {
	numexpr()
	  [
	    (
	      < LT >
	    | < GT >
	    | < LE >
	    | < GE >
	    | < EQ >
	    | < NEQ >
	    )
	    numexpr()
  	  ]
  } catch (ParseException e) {
	consumeUntil(g, e, "expression");
  }
  
}

// nivel intermediario de precedencia
void numexpr() throws ParseEOFException :
{
}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    | < OR >
    | < XOR >
    )
    term()
  )*
}

// expressoes com prioridade de precedecia
void term() throws ParseEOFException :
{
}
{
  unaryexpr()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    | < REM >
    | < AND >
    )
    unaryexpr()
  )*
}

// expressoes unarias que te mais alta precedencia perante a gramatica
void unaryexpr() throws ParseEOFException :
{
}
{
  [
    (
      < PLUS >
    | < MINUS >
    | < NOT >
    )
  ]
  factor()
}

// fator que pode ser valorada ou chamada em recursivo com expressoes para encadeamento
void factor() throws ParseEOFException :
{
}
{
  (
    < tipo_INT >
  | 
    < tipo_STRING >
  | 
    < tipo_NULL >
  | 
    < tipo_CHAR >
  | 
    < tipo_BOOLEAN >
  | 
    lvalue()
  | 
    < LPAREN > expression() < RPAREN >
  )
}

void arglist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
  [
    expression()
    (
      < COMMA > expression()
    )*
  ]
}

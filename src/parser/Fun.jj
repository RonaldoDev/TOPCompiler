/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criará metodos estaticos
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;

public class Fun
{
  final static String Version = "X++ Compiler - Version 1.0 - 2018";
  boolean Menosshort = false; //saída resumida == falso;

  //define o metodo "main" da classe langX.
  public static void main(String args []) throws ParseException
  {
    String filename = "C:/Users/Vitor/Downloads/Eclipse/top.txt"; //nome do arquivo a ser analisado
    Fun parser; //analisador lexico/sintatico
    System.out.println(Version);
    //le do arquivo    
    System.out.println("Lendo do arquivo" + filename + "\n");
    try
    {
      parser = new Fun(new java.io.FileInputStream(filename));
    }
    catch (java.io.FileNotFoundException e)
    {
      System.out.println("Arquivo " + filename + " não encontrado.");
      return;
    }
    parser.Menosshort = false;
    parser.program(); //chama o metodo que faz a analise
    //verifica se houve erro lexico
    if (parser.token_source.foundLexError() != 0)
    {
      System.out.println(parser.token_source.foundLexError() + " erros léxicos encontrados");
    }
    else
    {
      System.out.println("Programa analisado com sucesso!");
    }
  } //main

  static public String im(int x) //metodo auxiliar
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return s;
  }
} // Fun

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < REM : "%" >
| < NOT : "not" >
| < AND : "and" >
| < OR : "or" >
| < XOR : "xor" >
| < PWR : "^" >
}

TOKEN : //palavras reservadas
{
  < BREAK : "break" >
| < CLASS : "class" >
| < CONSTRUCTOR : "constructor" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FOR : "for" >
| < WHILE : "while" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < STRING : "string" >
| < SUPER : "super" >
  //nosso
| < FLOAT : "float" >
| < BOOLEAN : "boolean" >
| < CHAR : "char" >
| < FUNCTION : "function" >
}

/* Símbolos especiais */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

/* constantes */

TOKEN :
{
  < tipo_INT :
    ( // números decimais, octais, hexadecimais ou binários
      (
        [ "0"-"9" ] ([ "0"-"9" ])*
      )
    |
      (
        [ "0"-"7" ] ([ "0"-"7" ])* [ "o", "O" ]
      )
    |
      (
        [ "0"-"9" ] ([ "0"-"7", "A"-"F", "a"-"f" ])* [ "h", "H" ]
      )
    |
      (
        [ "0"-"1" ] ([ "0"-"1" ])* [ "b", "B" ]
      )
    ) >
| 
  < tipo_FLOAT :
    ( // floats
      (
        ([ "0"-"9" ])+ [ "." ] ([ "0"-"9" ])+
      )
    ) >
| 
  < tipo_STRING : // constante string como "abcd bcda"
    "\"" (~[ "\"", "\n", "\r" ])* "\"" >
| < tipo_NULL : "null" > //constante null
| < tipo_CHAR : // constante CHAR como 'a'
    "\'" (~[ "\'", "\n", "\r" ]) "\'" >
| < tipo_BOOLEAN :
    (
      "true"
    | "false"
    ) 
  >
}

/* Identificadores */

TOKEN :
{
  < tipo_Identificador :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

/* Qualificadores */

TOKEN :
{
  < PUBLIC : "public" >    
| < PROTECTED : "protected" >
| < PRIVATE : "private" >
| < FINAL : "final" >
}

/* Comentários */

SKIP :
{
  "/*" : multilinecomment
}

/*
TOKEN: {
    < WHILE: "while" > : WHILEMODE
}
*/
< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

SKIP :
{
  "//" : singlelinecomment
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}

/* Trata erros léxicos */

SPECIAL_TOKEN :
{
  < INVALID_LEXICAL : 
    (~[ "a"-"z", 
    "A"-"Z", 
    "0"-"9", 
    "\"", 
    "(", 
    ")", 
    "[", 
    "[", 
    "{", 
    "{", 
    ";", 
    ",", 
    ".", 
    "'", 
    "=", 
    ">", 
    "<", 
    "!", 
    "+", 
    "-", 
    "*", 
    "/", 
    "%", 
    " ", 
    "\t", 
    "\n", 
    "\r", 
    "\f" 
    ])+ >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Elemento inv\u00e1lido encontrado: " + image);
    countLexError++;
  }
| 
  < INVALID_CONST : 
    "\"" (~[ "\n", "\r", "\"" ])* [ "\n", "\r" ] >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - A constante possui uma quebra de linha inesperada: " + image);
    countLexError++;
  }
| 
  < INVALID_CHAR :
    "\'" (~[ "\n", "\r", "\'" ])* [ "\n", "\r" ]
  | 
    "\'" (~[ "\n", "\r", "\'" ]) (~[ "\n", "\r", "\'" ])+ "\'" 
  >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - Erro de char. " + image);
    countLexError++;
  }
  /*|  
  < INVALID_FLOAT : 
      [ "0"-"9" ] [ "." ]
   	| [ "." ] ([ "0"-"9" ]+)
   	| ([ "0"-"9" ]+ [ "." ])+
   	| [ "0"-"9" ] [ "." ] ([ "a"-"z", "A" - "Z"])
     >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - FLOAT INVALIDO " + image);
    countLexError++;
  }*/
}

JAVACODE void program()
{
  Token t;
  do
  {
    t = getNextToken();
    Token st = t;
    boolean error = false;
    while (st.specialToken != null)
    {
      st = st.specialToken;
      error = true;
    }
    do
    {
      if (Menosshort) 
      System.out.println(st.image + "  " + im(st.kind) + " " + st.kind);
      else
      {
        if (im(st.kind) == "<INVALID_LEXICAL>" || im(st.kind) == "<INVALID_CONST>" || im(st.kind) == "<INVALID_CHAR>" || im(st.kind) == "<INVALID_FLOAT>")
        {
        }
        else
        {
          System.out.println("Linha: " + st.beginLine + " Coluna: " + st.beginColumn + " -> " + st.image + " " + im(st.kind));
        }
      }
      st = st.next;
    }
    while (st != t.next);
    if (error)
    {
      System.out.println("Linha: " + t.beginLine + " Coluna: " + t.beginColumn + " -> " + t.image + " " + im(t.kind));
    }
  }
  while (t.kind != FunConstants.EOF);
}
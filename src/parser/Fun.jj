/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class Fun
{
  final static String Version = "X++ Compiler - Version 1.0 - 2018";
  boolean Menosshort = false; //saída resumida == falso;

  //define o metodo "main" da classe langX.
  public static void main(String args []) throws ParseException
  {
    String filename = "/Users/ronaldostranger/Downloads/top.txt"; //nome do arquivo a ser analisado
    Fun parser; //analisador lexico/sintatico
    int i;
    args = new String []
    {
      "-short"
    }
    ;
    boolean ms = false;
    System.out.println(Version);
    //le os parametros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
      if (args [i].toLowerCase().equals("-short")) 
      ms = true;
      else
      {
        System.out.println("Usage is: java langX [-short] inputfile");
        System.exit(0);
      }
    }
    if (args [i].equals("-"))
    { //le da entrada-padrao
      System.out.println("Reading from standard input\u2026");
      parser = new Fun(System.in);
    }
    else
    { //le do arquivo
      //filename = args [args.length - i];
      System.out.println("Reading from file " + filename + "...");
      try
      {
        parser = new Fun(new java.io.FileInputStream(filename));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("File" + filename + " not found.");
        return;
      }
    }
    parser.Menosshort = ms;
    parser.program(); //chama o metodo que faz a analise
    //verifica se houve erro lexico
    if (parser.token_source.foundLexError() != 0) 
    System.out.println(parser.token_source.foundLexError() + " Lexical Errors found");
    else 
    System.out.println("Program successfully analized.  ");
  } //main

  static public String im(int x) //metodo auxiliar
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return s;
  }
} // Fun

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError()
  {
    return countLexError;
  }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < REM : "%" >
| < NOT : "not" >
| < AND : "and" >
| < OR : "or" >
| < XOR : "xor" >
}

TOKEN : //palavras reservadas
{
  < BREAK : "break" >
| < CLASS : "class" >
| < CONSTRUCTOR : "constructor" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FOR : "for" >
| < WHILE : "while" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < STRING : "string" >
| < SUPER : "super" >
  //nosso
| < FLOAT : "float" >
| < BOOLEAN : "boolean" >
| < CHAR : "char" >
}

/* Símbolos especiais */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

/* constantes */

TOKEN :
{
  < int_constant :
    ( // números decimais, octais, hexadecimais ou binários
      (
        [ "0"-"9" ] ([ "0"-"9" ])*
      )
    |
      (
        [ "0"-"7" ] ([ "0"-"7" ])* [ "o", "O" ]
      )
    |
      (
        [ "0"-"9" ] ([ "0"-"7", "A"-"F", "a"-"f" ])* [ "h", "H" ]
      )
    |
      (
        [ "0"-"1" ] ([ "0"-"1" ])* [ "b", "B" ]
      )
    ) >
| 
  < float_constant :
    ( // floats
      (
        ([ "0"-"9" ])+ [ "." ] ([ "0"-"9" ])+
      )
    ) >
| 
  < string_constant : // constante string como "abcd bcda"
    "\"" (~[ "\"", "\n", "\r" ])* "\"" >
| < null_constant : "null" > //constante null
| < char_constant : // constante CHAR como 'abcd bcda'
    "\'" (~[ "\'", "\n", "\r" ])* "\'" >
| < boolean_constant :
    (
      "true"
    | "false"
    ) 
  >
}

/* Identificadores */

TOKEN :
{
  < IDENT :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

/* Comentários */

SKIP :
{
  "/*" : multilinecomment
}
/*
TOKEN: {
    < WHILE: "while" > : WHILEMODE
}
*/
< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

SKIP :
{
  "//" : singlelinecomment
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}

/* Trata erros léxicos */

SPECIAL_TOKEN :
{
  < INVALID_LEXICAL : 
    (~[ "a"-"z", "A"-"Z", 
    "0"-"9", 
    "\"", 
    "(", 
    ")", 
    "[", 
    "[", 
    "{", 
    "{", 
    ";", 
    ",", 
    ".", 
    "=", 
    ">", 
    "<", 
    "!", 
    "+", 
    "-", 
    "*", 
    "/", 
    "%", 
    " ", 
    "\t", 
    "\n", 
    "\r", 
    "\f" 
    ])+ >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - String inv\u00e1lida encontrada: " + image);
    countLexError++;
  }
| 
  < INVALID_CONST : 
    "\"" (~[ "\n", "\r", "\"" ])* [ "\n", "\r" ] >
  {
    System.err.println("Linha " + input_stream.getEndLine() + " - A constante possui um \\n: " + image);
    countLexError++;
  }
}

void program() :
{}
{
  (
    < PLUS >
    {
      System.out.println("Reconheceu PLUS");
    }
  | < MINUS >
    {
      System.out.println("Reconheceu MINUS");
    }
  | < MULTIPLY >
    {
      System.out.println("Reconheceu MULTIPLY");
    }
  | < DIVIDE >
    {
      System.out.println("Reconheceu DIVIDE");
    }
  | < IF >
    {
      System.out.println("Reconheceu if");
    }
  | < float_constant >
    {
      System.out.println("Reconheceu float");
    }
  | < boolean_constant >
    {
      System.out.println("Reconheceu bol");
    }
    | < IDENT >
    {
      System.out.println("Reconheceu STR");
    }
  
  )*
}
